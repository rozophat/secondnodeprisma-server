module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAuthor {
  count: Int!
}

type AggregateBook {
  count: Int!
}

type AggregateBook1 {
  count: Int!
}

type AggregateLead {
  count: Int!
}

type AggregateSequelizeMeta {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Author {
  id: Int!
  age: String
  createdAt: DateTime!
  name: String
  updatedAt: DateTime!
}

type AuthorConnection {
  pageInfo: PageInfo!
  edges: [AuthorEdge]!
  aggregate: AggregateAuthor!
}

input AuthorCreateInput {
  id: Int
  age: String
  name: String
}

type AuthorEdge {
  node: Author!
  cursor: String!
}

enum AuthorOrderByInput {
  id_ASC
  id_DESC
  age_ASC
  age_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AuthorPreviousValues {
  id: Int!
  age: String
  createdAt: DateTime!
  name: String
  updatedAt: DateTime!
}

type AuthorSubscriptionPayload {
  mutation: MutationType!
  node: Author
  updatedFields: [String!]
  previousValues: AuthorPreviousValues
}

input AuthorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AuthorWhereInput
  AND: [AuthorSubscriptionWhereInput!]
  OR: [AuthorSubscriptionWhereInput!]
  NOT: [AuthorSubscriptionWhereInput!]
}

input AuthorUpdateInput {
  age: String
  name: String
}

input AuthorUpdateManyMutationInput {
  age: String
  name: String
}

input AuthorWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  age: String
  age_not: String
  age_in: [String!]
  age_not_in: [String!]
  age_lt: String
  age_lte: String
  age_gt: String
  age_gte: String
  age_contains: String
  age_not_contains: String
  age_starts_with: String
  age_not_starts_with: String
  age_ends_with: String
  age_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [AuthorWhereInput!]
  OR: [AuthorWhereInput!]
  NOT: [AuthorWhereInput!]
}

input AuthorWhereUniqueInput {
  id: Int
}

type BatchPayload {
  count: Long!
}

type Book {
  id: Int!
  authorId: Int
  createdAt: DateTime!
  genre: String
  name: String
  updatedAt: DateTime!
}

type Book1 {
  id: Int!
  authorId: Int
  createdAt: DateTime!
  genre: String
  name: String
  updatedAt: DateTime!
}

type Book1Connection {
  pageInfo: PageInfo!
  edges: [Book1Edge]!
  aggregate: AggregateBook1!
}

input Book1CreateInput {
  authorId: Int
  genre: String
  name: String
}

type Book1Edge {
  node: Book1!
  cursor: String!
}

enum Book1OrderByInput {
  id_ASC
  id_DESC
  authorId_ASC
  authorId_DESC
  createdAt_ASC
  createdAt_DESC
  genre_ASC
  genre_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type Book1PreviousValues {
  id: Int!
  authorId: Int
  createdAt: DateTime!
  genre: String
  name: String
  updatedAt: DateTime!
}

type Book1SubscriptionPayload {
  mutation: MutationType!
  node: Book1
  updatedFields: [String!]
  previousValues: Book1PreviousValues
}

input Book1SubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: Book1WhereInput
  AND: [Book1SubscriptionWhereInput!]
  OR: [Book1SubscriptionWhereInput!]
  NOT: [Book1SubscriptionWhereInput!]
}

input Book1UpdateInput {
  authorId: Int
  genre: String
  name: String
}

input Book1UpdateManyMutationInput {
  authorId: Int
  genre: String
  name: String
}

input Book1WhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  authorId: Int
  authorId_not: Int
  authorId_in: [Int!]
  authorId_not_in: [Int!]
  authorId_lt: Int
  authorId_lte: Int
  authorId_gt: Int
  authorId_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  genre: String
  genre_not: String
  genre_in: [String!]
  genre_not_in: [String!]
  genre_lt: String
  genre_lte: String
  genre_gt: String
  genre_gte: String
  genre_contains: String
  genre_not_contains: String
  genre_starts_with: String
  genre_not_starts_with: String
  genre_ends_with: String
  genre_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [Book1WhereInput!]
  OR: [Book1WhereInput!]
  NOT: [Book1WhereInput!]
}

input Book1WhereUniqueInput {
  id: Int
}

type BookConnection {
  pageInfo: PageInfo!
  edges: [BookEdge]!
  aggregate: AggregateBook!
}

input BookCreateInput {
  id: Int
  authorId: Int
  genre: String
  name: String
}

type BookEdge {
  node: Book!
  cursor: String!
}

enum BookOrderByInput {
  id_ASC
  id_DESC
  authorId_ASC
  authorId_DESC
  createdAt_ASC
  createdAt_DESC
  genre_ASC
  genre_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BookPreviousValues {
  id: Int!
  authorId: Int
  createdAt: DateTime!
  genre: String
  name: String
  updatedAt: DateTime!
}

type BookSubscriptionPayload {
  mutation: MutationType!
  node: Book
  updatedFields: [String!]
  previousValues: BookPreviousValues
}

input BookSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BookWhereInput
  AND: [BookSubscriptionWhereInput!]
  OR: [BookSubscriptionWhereInput!]
  NOT: [BookSubscriptionWhereInput!]
}

input BookUpdateInput {
  authorId: Int
  genre: String
  name: String
}

input BookUpdateManyMutationInput {
  authorId: Int
  genre: String
  name: String
}

input BookWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  authorId: Int
  authorId_not: Int
  authorId_in: [Int!]
  authorId_not_in: [Int!]
  authorId_lt: Int
  authorId_lte: Int
  authorId_gt: Int
  authorId_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  genre: String
  genre_not: String
  genre_in: [String!]
  genre_not_in: [String!]
  genre_lt: String
  genre_lte: String
  genre_gt: String
  genre_gte: String
  genre_contains: String
  genre_not_contains: String
  genre_starts_with: String
  genre_not_starts_with: String
  genre_ends_with: String
  genre_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [BookWhereInput!]
  OR: [BookWhereInput!]
  NOT: [BookWhereInput!]
}

input BookWhereUniqueInput {
  id: Int
}

scalar DateTime

type Lead {
  id: UUID!
  createdAt: DateTime!
  email: String!
  updatedAt: DateTime!
}

type LeadConnection {
  pageInfo: PageInfo!
  edges: [LeadEdge]!
  aggregate: AggregateLead!
}

input LeadCreateInput {
  id: UUID
  email: String!
}

type LeadEdge {
  node: Lead!
  cursor: String!
}

enum LeadOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LeadPreviousValues {
  id: UUID!
  createdAt: DateTime!
  email: String!
  updatedAt: DateTime!
}

type LeadSubscriptionPayload {
  mutation: MutationType!
  node: Lead
  updatedFields: [String!]
  previousValues: LeadPreviousValues
}

input LeadSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LeadWhereInput
  AND: [LeadSubscriptionWhereInput!]
  OR: [LeadSubscriptionWhereInput!]
  NOT: [LeadSubscriptionWhereInput!]
}

input LeadUpdateInput {
  email: String
}

input LeadUpdateManyMutationInput {
  email: String
}

input LeadWhereInput {
  id: UUID
  id_not: UUID
  id_in: [UUID!]
  id_not_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_gt: UUID
  id_gte: UUID
  id_contains: UUID
  id_not_contains: UUID
  id_starts_with: UUID
  id_not_starts_with: UUID
  id_ends_with: UUID
  id_not_ends_with: UUID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LeadWhereInput!]
  OR: [LeadWhereInput!]
  NOT: [LeadWhereInput!]
}

input LeadWhereUniqueInput {
  id: UUID
}

scalar Long

type Mutation {
  createAuthor(data: AuthorCreateInput!): Author!
  updateAuthor(data: AuthorUpdateInput!, where: AuthorWhereUniqueInput!): Author
  updateManyAuthors(data: AuthorUpdateManyMutationInput!, where: AuthorWhereInput): BatchPayload!
  upsertAuthor(where: AuthorWhereUniqueInput!, create: AuthorCreateInput!, update: AuthorUpdateInput!): Author!
  deleteAuthor(where: AuthorWhereUniqueInput!): Author
  deleteManyAuthors(where: AuthorWhereInput): BatchPayload!
  createBook(data: BookCreateInput!): Book!
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateManyBooks(data: BookUpdateManyMutationInput!, where: BookWhereInput): BatchPayload!
  upsertBook(where: BookWhereUniqueInput!, create: BookCreateInput!, update: BookUpdateInput!): Book!
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteManyBooks(where: BookWhereInput): BatchPayload!
  createBook1(data: Book1CreateInput!): Book1!
  updateBook1(data: Book1UpdateInput!, where: Book1WhereUniqueInput!): Book1
  updateManyBook1s(data: Book1UpdateManyMutationInput!, where: Book1WhereInput): BatchPayload!
  upsertBook1(where: Book1WhereUniqueInput!, create: Book1CreateInput!, update: Book1UpdateInput!): Book1!
  deleteBook1(where: Book1WhereUniqueInput!): Book1
  deleteManyBook1s(where: Book1WhereInput): BatchPayload!
  createLead(data: LeadCreateInput!): Lead!
  updateLead(data: LeadUpdateInput!, where: LeadWhereUniqueInput!): Lead
  updateManyLeads(data: LeadUpdateManyMutationInput!, where: LeadWhereInput): BatchPayload!
  upsertLead(where: LeadWhereUniqueInput!, create: LeadCreateInput!, update: LeadUpdateInput!): Lead!
  deleteLead(where: LeadWhereUniqueInput!): Lead
  deleteManyLeads(where: LeadWhereInput): BatchPayload!
  createSequelizeMeta(data: SequelizeMetaCreateInput!): SequelizeMeta!
  deleteSequelizeMeta(where: SequelizeMetaWhereUniqueInput!): SequelizeMeta
  deleteManySequelizeMetas(where: SequelizeMetaWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  author(where: AuthorWhereUniqueInput!): Author
  authors(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Author]!
  authorsConnection(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthorConnection!
  book(where: BookWhereUniqueInput!): Book
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book]!
  booksConnection(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookConnection!
  book1(where: Book1WhereUniqueInput!): Book1
  book1s(where: Book1WhereInput, orderBy: Book1OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book1]!
  book1sConnection(where: Book1WhereInput, orderBy: Book1OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Book1Connection!
  lead(where: LeadWhereUniqueInput!): Lead
  leads(where: LeadWhereInput, orderBy: LeadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lead]!
  leadsConnection(where: LeadWhereInput, orderBy: LeadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LeadConnection!
  sequelizeMeta(where: SequelizeMetaWhereUniqueInput!): SequelizeMeta
  sequelizeMetas(where: SequelizeMetaWhereInput, orderBy: SequelizeMetaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SequelizeMeta]!
  sequelizeMetasConnection(where: SequelizeMetaWhereInput, orderBy: SequelizeMetaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SequelizeMetaConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type SequelizeMeta {
  name: ID!
}

type SequelizeMetaConnection {
  pageInfo: PageInfo!
  edges: [SequelizeMetaEdge]!
  aggregate: AggregateSequelizeMeta!
}

input SequelizeMetaCreateInput {
  name: ID
}

type SequelizeMetaEdge {
  node: SequelizeMeta!
  cursor: String!
}

enum SequelizeMetaOrderByInput {
  name_ASC
  name_DESC
}

type SequelizeMetaPreviousValues {
  name: ID!
}

type SequelizeMetaSubscriptionPayload {
  mutation: MutationType!
  node: SequelizeMeta
  updatedFields: [String!]
  previousValues: SequelizeMetaPreviousValues
}

input SequelizeMetaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SequelizeMetaWhereInput
  AND: [SequelizeMetaSubscriptionWhereInput!]
  OR: [SequelizeMetaSubscriptionWhereInput!]
  NOT: [SequelizeMetaSubscriptionWhereInput!]
}

input SequelizeMetaWhereInput {
  name: ID
  name_not: ID
  name_in: [ID!]
  name_not_in: [ID!]
  name_lt: ID
  name_lte: ID
  name_gt: ID
  name_gte: ID
  name_contains: ID
  name_not_contains: ID
  name_starts_with: ID
  name_not_starts_with: ID
  name_ends_with: ID
  name_not_ends_with: ID
  AND: [SequelizeMetaWhereInput!]
  OR: [SequelizeMetaWhereInput!]
  NOT: [SequelizeMetaWhereInput!]
}

input SequelizeMetaWhereUniqueInput {
  name: ID
}

type Subscription {
  author(where: AuthorSubscriptionWhereInput): AuthorSubscriptionPayload
  book(where: BookSubscriptionWhereInput): BookSubscriptionPayload
  book1(where: Book1SubscriptionWhereInput): Book1SubscriptionPayload
  lead(where: LeadSubscriptionWhereInput): LeadSubscriptionPayload
  sequelizeMeta(where: SequelizeMetaSubscriptionWhereInput): SequelizeMetaSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: UUID!
  createdAt: DateTime!
  email: String!
  firstname: String
  isAdmin: Boolean
  lastname: String
  password: String
  updatedAt: DateTime!
  username: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: UUID
  email: String!
  firstname: String
  isAdmin: Boolean
  lastname: String
  password: String
  username: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  firstname_ASC
  firstname_DESC
  isAdmin_ASC
  isAdmin_DESC
  lastname_ASC
  lastname_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  username_ASC
  username_DESC
}

type UserPreviousValues {
  id: UUID!
  createdAt: DateTime!
  email: String!
  firstname: String
  isAdmin: Boolean
  lastname: String
  password: String
  updatedAt: DateTime!
  username: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  firstname: String
  isAdmin: Boolean
  lastname: String
  password: String
  username: String
}

input UserUpdateManyMutationInput {
  email: String
  firstname: String
  isAdmin: Boolean
  lastname: String
  password: String
  username: String
}

input UserWhereInput {
  id: UUID
  id_not: UUID
  id_in: [UUID!]
  id_not_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_gt: UUID
  id_gte: UUID
  id_contains: UUID
  id_not_contains: UUID
  id_starts_with: UUID
  id_not_starts_with: UUID
  id_ends_with: UUID
  id_not_ends_with: UUID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  isAdmin: Boolean
  isAdmin_not: Boolean
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: UUID
  email: String
}

scalar UUID
`
      }
    