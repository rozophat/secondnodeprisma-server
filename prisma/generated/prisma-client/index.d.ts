// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  author: (where?: AuthorWhereInput) => Promise<boolean>;
  book: (where?: BookWhereInput) => Promise<boolean>;
  book1: (where?: Book1WhereInput) => Promise<boolean>;
  lead: (where?: LeadWhereInput) => Promise<boolean>;
  sequelizeMeta: (where?: SequelizeMetaWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  author: (where: AuthorWhereUniqueInput) => AuthorNullablePromise;
  authors: (args?: {
    where?: AuthorWhereInput;
    orderBy?: AuthorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Author>;
  authorsConnection: (args?: {
    where?: AuthorWhereInput;
    orderBy?: AuthorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AuthorConnectionPromise;
  book: (where: BookWhereUniqueInput) => BookNullablePromise;
  books: (args?: {
    where?: BookWhereInput;
    orderBy?: BookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Book>;
  booksConnection: (args?: {
    where?: BookWhereInput;
    orderBy?: BookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BookConnectionPromise;
  book1: (where: Book1WhereUniqueInput) => Book1NullablePromise;
  book1s: (args?: {
    where?: Book1WhereInput;
    orderBy?: Book1OrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Book1>;
  book1sConnection: (args?: {
    where?: Book1WhereInput;
    orderBy?: Book1OrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Book1ConnectionPromise;
  lead: (where: LeadWhereUniqueInput) => LeadNullablePromise;
  leads: (args?: {
    where?: LeadWhereInput;
    orderBy?: LeadOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Lead>;
  leadsConnection: (args?: {
    where?: LeadWhereInput;
    orderBy?: LeadOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LeadConnectionPromise;
  sequelizeMeta: (
    where: SequelizeMetaWhereUniqueInput
  ) => SequelizeMetaNullablePromise;
  sequelizeMetas: (args?: {
    where?: SequelizeMetaWhereInput;
    orderBy?: SequelizeMetaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SequelizeMeta>;
  sequelizeMetasConnection: (args?: {
    where?: SequelizeMetaWhereInput;
    orderBy?: SequelizeMetaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SequelizeMetaConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAuthor: (data: AuthorCreateInput) => AuthorPromise;
  updateAuthor: (args: {
    data: AuthorUpdateInput;
    where: AuthorWhereUniqueInput;
  }) => AuthorPromise;
  updateManyAuthors: (args: {
    data: AuthorUpdateManyMutationInput;
    where?: AuthorWhereInput;
  }) => BatchPayloadPromise;
  upsertAuthor: (args: {
    where: AuthorWhereUniqueInput;
    create: AuthorCreateInput;
    update: AuthorUpdateInput;
  }) => AuthorPromise;
  deleteAuthor: (where: AuthorWhereUniqueInput) => AuthorPromise;
  deleteManyAuthors: (where?: AuthorWhereInput) => BatchPayloadPromise;
  createBook: (data: BookCreateInput) => BookPromise;
  updateBook: (args: {
    data: BookUpdateInput;
    where: BookWhereUniqueInput;
  }) => BookPromise;
  updateManyBooks: (args: {
    data: BookUpdateManyMutationInput;
    where?: BookWhereInput;
  }) => BatchPayloadPromise;
  upsertBook: (args: {
    where: BookWhereUniqueInput;
    create: BookCreateInput;
    update: BookUpdateInput;
  }) => BookPromise;
  deleteBook: (where: BookWhereUniqueInput) => BookPromise;
  deleteManyBooks: (where?: BookWhereInput) => BatchPayloadPromise;
  createBook1: (data: Book1CreateInput) => Book1Promise;
  updateBook1: (args: {
    data: Book1UpdateInput;
    where: Book1WhereUniqueInput;
  }) => Book1Promise;
  updateManyBook1s: (args: {
    data: Book1UpdateManyMutationInput;
    where?: Book1WhereInput;
  }) => BatchPayloadPromise;
  upsertBook1: (args: {
    where: Book1WhereUniqueInput;
    create: Book1CreateInput;
    update: Book1UpdateInput;
  }) => Book1Promise;
  deleteBook1: (where: Book1WhereUniqueInput) => Book1Promise;
  deleteManyBook1s: (where?: Book1WhereInput) => BatchPayloadPromise;
  createLead: (data: LeadCreateInput) => LeadPromise;
  updateLead: (args: {
    data: LeadUpdateInput;
    where: LeadWhereUniqueInput;
  }) => LeadPromise;
  updateManyLeads: (args: {
    data: LeadUpdateManyMutationInput;
    where?: LeadWhereInput;
  }) => BatchPayloadPromise;
  upsertLead: (args: {
    where: LeadWhereUniqueInput;
    create: LeadCreateInput;
    update: LeadUpdateInput;
  }) => LeadPromise;
  deleteLead: (where: LeadWhereUniqueInput) => LeadPromise;
  deleteManyLeads: (where?: LeadWhereInput) => BatchPayloadPromise;
  createSequelizeMeta: (data: SequelizeMetaCreateInput) => SequelizeMetaPromise;
  deleteSequelizeMeta: (
    where: SequelizeMetaWhereUniqueInput
  ) => SequelizeMetaPromise;
  deleteManySequelizeMetas: (
    where?: SequelizeMetaWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  author: (
    where?: AuthorSubscriptionWhereInput
  ) => AuthorSubscriptionPayloadSubscription;
  book: (
    where?: BookSubscriptionWhereInput
  ) => BookSubscriptionPayloadSubscription;
  book1: (
    where?: Book1SubscriptionWhereInput
  ) => Book1SubscriptionPayloadSubscription;
  lead: (
    where?: LeadSubscriptionWhereInput
  ) => LeadSubscriptionPayloadSubscription;
  sequelizeMeta: (
    where?: SequelizeMetaSubscriptionWhereInput
  ) => SequelizeMetaSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AuthorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "age_ASC"
  | "age_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type BookOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "authorId_ASC"
  | "authorId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "genre_ASC"
  | "genre_DESC"
  | "name_ASC"
  | "name_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Book1OrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "authorId_ASC"
  | "authorId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "genre_ASC"
  | "genre_DESC"
  | "name_ASC"
  | "name_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LeadOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SequelizeMetaOrderByInput = "name_ASC" | "name_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "firstname_ASC"
  | "firstname_DESC"
  | "isAdmin_ASC"
  | "isAdmin_DESC"
  | "lastname_ASC"
  | "lastname_DESC"
  | "password_ASC"
  | "password_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "username_ASC"
  | "username_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AuthorWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface AuthorWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  age?: Maybe<String>;
  age_not?: Maybe<String>;
  age_in?: Maybe<String[] | String>;
  age_not_in?: Maybe<String[] | String>;
  age_lt?: Maybe<String>;
  age_lte?: Maybe<String>;
  age_gt?: Maybe<String>;
  age_gte?: Maybe<String>;
  age_contains?: Maybe<String>;
  age_not_contains?: Maybe<String>;
  age_starts_with?: Maybe<String>;
  age_not_starts_with?: Maybe<String>;
  age_ends_with?: Maybe<String>;
  age_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AuthorWhereInput[] | AuthorWhereInput>;
  OR?: Maybe<AuthorWhereInput[] | AuthorWhereInput>;
  NOT?: Maybe<AuthorWhereInput[] | AuthorWhereInput>;
}

export type BookWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface BookWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  authorId?: Maybe<Int>;
  authorId_not?: Maybe<Int>;
  authorId_in?: Maybe<Int[] | Int>;
  authorId_not_in?: Maybe<Int[] | Int>;
  authorId_lt?: Maybe<Int>;
  authorId_lte?: Maybe<Int>;
  authorId_gt?: Maybe<Int>;
  authorId_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  genre?: Maybe<String>;
  genre_not?: Maybe<String>;
  genre_in?: Maybe<String[] | String>;
  genre_not_in?: Maybe<String[] | String>;
  genre_lt?: Maybe<String>;
  genre_lte?: Maybe<String>;
  genre_gt?: Maybe<String>;
  genre_gte?: Maybe<String>;
  genre_contains?: Maybe<String>;
  genre_not_contains?: Maybe<String>;
  genre_starts_with?: Maybe<String>;
  genre_not_starts_with?: Maybe<String>;
  genre_ends_with?: Maybe<String>;
  genre_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BookWhereInput[] | BookWhereInput>;
  OR?: Maybe<BookWhereInput[] | BookWhereInput>;
  NOT?: Maybe<BookWhereInput[] | BookWhereInput>;
}

export type Book1WhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface Book1WhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  authorId?: Maybe<Int>;
  authorId_not?: Maybe<Int>;
  authorId_in?: Maybe<Int[] | Int>;
  authorId_not_in?: Maybe<Int[] | Int>;
  authorId_lt?: Maybe<Int>;
  authorId_lte?: Maybe<Int>;
  authorId_gt?: Maybe<Int>;
  authorId_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  genre?: Maybe<String>;
  genre_not?: Maybe<String>;
  genre_in?: Maybe<String[] | String>;
  genre_not_in?: Maybe<String[] | String>;
  genre_lt?: Maybe<String>;
  genre_lte?: Maybe<String>;
  genre_gt?: Maybe<String>;
  genre_gte?: Maybe<String>;
  genre_contains?: Maybe<String>;
  genre_not_contains?: Maybe<String>;
  genre_starts_with?: Maybe<String>;
  genre_not_starts_with?: Maybe<String>;
  genre_ends_with?: Maybe<String>;
  genre_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<Book1WhereInput[] | Book1WhereInput>;
  OR?: Maybe<Book1WhereInput[] | Book1WhereInput>;
  NOT?: Maybe<Book1WhereInput[] | Book1WhereInput>;
}

export type LeadWhereUniqueInput = AtLeastOne<{
  id: Maybe<UUID>;
}>;

export interface LeadWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<LeadWhereInput[] | LeadWhereInput>;
  OR?: Maybe<LeadWhereInput[] | LeadWhereInput>;
  NOT?: Maybe<LeadWhereInput[] | LeadWhereInput>;
}

export type SequelizeMetaWhereUniqueInput = AtLeastOne<{
  name: Maybe<ID_Input>;
}>;

export interface SequelizeMetaWhereInput {
  name?: Maybe<ID_Input>;
  name_not?: Maybe<ID_Input>;
  name_in?: Maybe<ID_Input[] | ID_Input>;
  name_not_in?: Maybe<ID_Input[] | ID_Input>;
  name_lt?: Maybe<ID_Input>;
  name_lte?: Maybe<ID_Input>;
  name_gt?: Maybe<ID_Input>;
  name_gte?: Maybe<ID_Input>;
  name_contains?: Maybe<ID_Input>;
  name_not_contains?: Maybe<ID_Input>;
  name_starts_with?: Maybe<ID_Input>;
  name_not_starts_with?: Maybe<ID_Input>;
  name_ends_with?: Maybe<ID_Input>;
  name_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<SequelizeMetaWhereInput[] | SequelizeMetaWhereInput>;
  OR?: Maybe<SequelizeMetaWhereInput[] | SequelizeMetaWhereInput>;
  NOT?: Maybe<SequelizeMetaWhereInput[] | SequelizeMetaWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<UUID>;
  email?: Maybe<String>;
}>;

export interface UserWhereInput {
  id?: Maybe<UUID>;
  id_not?: Maybe<UUID>;
  id_in?: Maybe<UUID[] | UUID>;
  id_not_in?: Maybe<UUID[] | UUID>;
  id_lt?: Maybe<UUID>;
  id_lte?: Maybe<UUID>;
  id_gt?: Maybe<UUID>;
  id_gte?: Maybe<UUID>;
  id_contains?: Maybe<UUID>;
  id_not_contains?: Maybe<UUID>;
  id_starts_with?: Maybe<UUID>;
  id_not_starts_with?: Maybe<UUID>;
  id_ends_with?: Maybe<UUID>;
  id_not_ends_with?: Maybe<UUID>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  isAdmin?: Maybe<Boolean>;
  isAdmin_not?: Maybe<Boolean>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface AuthorCreateInput {
  id?: Maybe<Int>;
  age?: Maybe<String>;
  name?: Maybe<String>;
}

export interface AuthorUpdateInput {
  age?: Maybe<String>;
  name?: Maybe<String>;
}

export interface AuthorUpdateManyMutationInput {
  age?: Maybe<String>;
  name?: Maybe<String>;
}

export interface BookCreateInput {
  id?: Maybe<Int>;
  authorId?: Maybe<Int>;
  genre?: Maybe<String>;
  name?: Maybe<String>;
}

export interface BookUpdateInput {
  authorId?: Maybe<Int>;
  genre?: Maybe<String>;
  name?: Maybe<String>;
}

export interface BookUpdateManyMutationInput {
  authorId?: Maybe<Int>;
  genre?: Maybe<String>;
  name?: Maybe<String>;
}

export interface Book1CreateInput {
  authorId?: Maybe<Int>;
  genre?: Maybe<String>;
  name?: Maybe<String>;
}

export interface Book1UpdateInput {
  authorId?: Maybe<Int>;
  genre?: Maybe<String>;
  name?: Maybe<String>;
}

export interface Book1UpdateManyMutationInput {
  authorId?: Maybe<Int>;
  genre?: Maybe<String>;
  name?: Maybe<String>;
}

export interface LeadCreateInput {
  id?: Maybe<UUID>;
  email: String;
}

export interface LeadUpdateInput {
  email?: Maybe<String>;
}

export interface LeadUpdateManyMutationInput {
  email?: Maybe<String>;
}

export interface SequelizeMetaCreateInput {
  name?: Maybe<ID_Input>;
}

export interface UserCreateInput {
  id?: Maybe<UUID>;
  email: String;
  firstname?: Maybe<String>;
  isAdmin?: Maybe<Boolean>;
  lastname?: Maybe<String>;
  password?: Maybe<String>;
  username?: Maybe<String>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  firstname?: Maybe<String>;
  isAdmin?: Maybe<Boolean>;
  lastname?: Maybe<String>;
  password?: Maybe<String>;
  username?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  firstname?: Maybe<String>;
  isAdmin?: Maybe<Boolean>;
  lastname?: Maybe<String>;
  password?: Maybe<String>;
  username?: Maybe<String>;
}

export interface AuthorSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AuthorWhereInput>;
  AND?: Maybe<AuthorSubscriptionWhereInput[] | AuthorSubscriptionWhereInput>;
  OR?: Maybe<AuthorSubscriptionWhereInput[] | AuthorSubscriptionWhereInput>;
  NOT?: Maybe<AuthorSubscriptionWhereInput[] | AuthorSubscriptionWhereInput>;
}

export interface BookSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BookWhereInput>;
  AND?: Maybe<BookSubscriptionWhereInput[] | BookSubscriptionWhereInput>;
  OR?: Maybe<BookSubscriptionWhereInput[] | BookSubscriptionWhereInput>;
  NOT?: Maybe<BookSubscriptionWhereInput[] | BookSubscriptionWhereInput>;
}

export interface Book1SubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<Book1WhereInput>;
  AND?: Maybe<Book1SubscriptionWhereInput[] | Book1SubscriptionWhereInput>;
  OR?: Maybe<Book1SubscriptionWhereInput[] | Book1SubscriptionWhereInput>;
  NOT?: Maybe<Book1SubscriptionWhereInput[] | Book1SubscriptionWhereInput>;
}

export interface LeadSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LeadWhereInput>;
  AND?: Maybe<LeadSubscriptionWhereInput[] | LeadSubscriptionWhereInput>;
  OR?: Maybe<LeadSubscriptionWhereInput[] | LeadSubscriptionWhereInput>;
  NOT?: Maybe<LeadSubscriptionWhereInput[] | LeadSubscriptionWhereInput>;
}

export interface SequelizeMetaSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SequelizeMetaWhereInput>;
  AND?: Maybe<
    SequelizeMetaSubscriptionWhereInput[] | SequelizeMetaSubscriptionWhereInput
  >;
  OR?: Maybe<
    SequelizeMetaSubscriptionWhereInput[] | SequelizeMetaSubscriptionWhereInput
  >;
  NOT?: Maybe<
    SequelizeMetaSubscriptionWhereInput[] | SequelizeMetaSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Author {
  id: Int;
  age?: String;
  createdAt: DateTimeOutput;
  name?: String;
  updatedAt: DateTimeOutput;
}

export interface AuthorPromise extends Promise<Author>, Fragmentable {
  id: () => Promise<Int>;
  age: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AuthorSubscription
  extends Promise<AsyncIterator<Author>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  age: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AuthorNullablePromise
  extends Promise<Author | null>,
    Fragmentable {
  id: () => Promise<Int>;
  age: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AuthorConnection {
  pageInfo: PageInfo;
  edges: AuthorEdge[];
}

export interface AuthorConnectionPromise
  extends Promise<AuthorConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AuthorEdge>>() => T;
  aggregate: <T = AggregateAuthorPromise>() => T;
}

export interface AuthorConnectionSubscription
  extends Promise<AsyncIterator<AuthorConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AuthorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAuthorSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AuthorEdge {
  node: Author;
  cursor: String;
}

export interface AuthorEdgePromise extends Promise<AuthorEdge>, Fragmentable {
  node: <T = AuthorPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AuthorEdgeSubscription
  extends Promise<AsyncIterator<AuthorEdge>>,
    Fragmentable {
  node: <T = AuthorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAuthor {
  count: Int;
}

export interface AggregateAuthorPromise
  extends Promise<AggregateAuthor>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAuthorSubscription
  extends Promise<AsyncIterator<AggregateAuthor>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Book {
  id: Int;
  authorId?: Int;
  createdAt: DateTimeOutput;
  genre?: String;
  name?: String;
  updatedAt: DateTimeOutput;
}

export interface BookPromise extends Promise<Book>, Fragmentable {
  id: () => Promise<Int>;
  authorId: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  genre: () => Promise<String>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BookSubscription
  extends Promise<AsyncIterator<Book>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  authorId: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  genre: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BookNullablePromise
  extends Promise<Book | null>,
    Fragmentable {
  id: () => Promise<Int>;
  authorId: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  genre: () => Promise<String>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BookConnection {
  pageInfo: PageInfo;
  edges: BookEdge[];
}

export interface BookConnectionPromise
  extends Promise<BookConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BookEdge>>() => T;
  aggregate: <T = AggregateBookPromise>() => T;
}

export interface BookConnectionSubscription
  extends Promise<AsyncIterator<BookConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BookEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBookSubscription>() => T;
}

export interface BookEdge {
  node: Book;
  cursor: String;
}

export interface BookEdgePromise extends Promise<BookEdge>, Fragmentable {
  node: <T = BookPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BookEdgeSubscription
  extends Promise<AsyncIterator<BookEdge>>,
    Fragmentable {
  node: <T = BookSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBook {
  count: Int;
}

export interface AggregateBookPromise
  extends Promise<AggregateBook>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBookSubscription
  extends Promise<AsyncIterator<AggregateBook>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Book1 {
  id: Int;
  authorId?: Int;
  createdAt: DateTimeOutput;
  genre?: String;
  name?: String;
  updatedAt: DateTimeOutput;
}

export interface Book1Promise extends Promise<Book1>, Fragmentable {
  id: () => Promise<Int>;
  authorId: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  genre: () => Promise<String>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Book1Subscription
  extends Promise<AsyncIterator<Book1>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  authorId: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  genre: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Book1NullablePromise
  extends Promise<Book1 | null>,
    Fragmentable {
  id: () => Promise<Int>;
  authorId: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  genre: () => Promise<String>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Book1Connection {
  pageInfo: PageInfo;
  edges: Book1Edge[];
}

export interface Book1ConnectionPromise
  extends Promise<Book1Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Book1Edge>>() => T;
  aggregate: <T = AggregateBook1Promise>() => T;
}

export interface Book1ConnectionSubscription
  extends Promise<AsyncIterator<Book1Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Book1EdgeSubscription>>>() => T;
  aggregate: <T = AggregateBook1Subscription>() => T;
}

export interface Book1Edge {
  node: Book1;
  cursor: String;
}

export interface Book1EdgePromise extends Promise<Book1Edge>, Fragmentable {
  node: <T = Book1Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Book1EdgeSubscription
  extends Promise<AsyncIterator<Book1Edge>>,
    Fragmentable {
  node: <T = Book1Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBook1 {
  count: Int;
}

export interface AggregateBook1Promise
  extends Promise<AggregateBook1>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBook1Subscription
  extends Promise<AsyncIterator<AggregateBook1>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Lead {
  id: UUID;
  createdAt: DateTimeOutput;
  email: String;
  updatedAt: DateTimeOutput;
}

export interface LeadPromise extends Promise<Lead>, Fragmentable {
  id: () => Promise<UUID>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface LeadSubscription
  extends Promise<AsyncIterator<Lead>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LeadNullablePromise
  extends Promise<Lead | null>,
    Fragmentable {
  id: () => Promise<UUID>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface LeadConnection {
  pageInfo: PageInfo;
  edges: LeadEdge[];
}

export interface LeadConnectionPromise
  extends Promise<LeadConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LeadEdge>>() => T;
  aggregate: <T = AggregateLeadPromise>() => T;
}

export interface LeadConnectionSubscription
  extends Promise<AsyncIterator<LeadConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LeadEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLeadSubscription>() => T;
}

export interface LeadEdge {
  node: Lead;
  cursor: String;
}

export interface LeadEdgePromise extends Promise<LeadEdge>, Fragmentable {
  node: <T = LeadPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LeadEdgeSubscription
  extends Promise<AsyncIterator<LeadEdge>>,
    Fragmentable {
  node: <T = LeadSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLead {
  count: Int;
}

export interface AggregateLeadPromise
  extends Promise<AggregateLead>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLeadSubscription
  extends Promise<AsyncIterator<AggregateLead>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SequelizeMeta {
  name: ID_Output;
}

export interface SequelizeMetaPromise
  extends Promise<SequelizeMeta>,
    Fragmentable {
  name: () => Promise<ID_Output>;
}

export interface SequelizeMetaSubscription
  extends Promise<AsyncIterator<SequelizeMeta>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<ID_Output>>;
}

export interface SequelizeMetaNullablePromise
  extends Promise<SequelizeMeta | null>,
    Fragmentable {
  name: () => Promise<ID_Output>;
}

export interface SequelizeMetaConnection {
  pageInfo: PageInfo;
  edges: SequelizeMetaEdge[];
}

export interface SequelizeMetaConnectionPromise
  extends Promise<SequelizeMetaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SequelizeMetaEdge>>() => T;
  aggregate: <T = AggregateSequelizeMetaPromise>() => T;
}

export interface SequelizeMetaConnectionSubscription
  extends Promise<AsyncIterator<SequelizeMetaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SequelizeMetaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSequelizeMetaSubscription>() => T;
}

export interface SequelizeMetaEdge {
  node: SequelizeMeta;
  cursor: String;
}

export interface SequelizeMetaEdgePromise
  extends Promise<SequelizeMetaEdge>,
    Fragmentable {
  node: <T = SequelizeMetaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SequelizeMetaEdgeSubscription
  extends Promise<AsyncIterator<SequelizeMetaEdge>>,
    Fragmentable {
  node: <T = SequelizeMetaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSequelizeMeta {
  count: Int;
}

export interface AggregateSequelizeMetaPromise
  extends Promise<AggregateSequelizeMeta>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSequelizeMetaSubscription
  extends Promise<AsyncIterator<AggregateSequelizeMeta>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: UUID;
  createdAt: DateTimeOutput;
  email: String;
  firstname?: String;
  isAdmin?: Boolean;
  lastname?: String;
  password?: String;
  updatedAt: DateTimeOutput;
  username?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<UUID>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  firstname: () => Promise<String>;
  isAdmin: () => Promise<Boolean>;
  lastname: () => Promise<String>;
  password: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  firstname: () => Promise<AsyncIterator<String>>;
  isAdmin: () => Promise<AsyncIterator<Boolean>>;
  lastname: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  username: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<UUID>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  firstname: () => Promise<String>;
  isAdmin: () => Promise<Boolean>;
  lastname: () => Promise<String>;
  password: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AuthorSubscriptionPayload {
  mutation: MutationType;
  node: Author;
  updatedFields: String[];
  previousValues: AuthorPreviousValues;
}

export interface AuthorSubscriptionPayloadPromise
  extends Promise<AuthorSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AuthorPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AuthorPreviousValuesPromise>() => T;
}

export interface AuthorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AuthorSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AuthorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AuthorPreviousValuesSubscription>() => T;
}

export interface AuthorPreviousValues {
  id: Int;
  age?: String;
  createdAt: DateTimeOutput;
  name?: String;
  updatedAt: DateTimeOutput;
}

export interface AuthorPreviousValuesPromise
  extends Promise<AuthorPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  age: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AuthorPreviousValuesSubscription
  extends Promise<AsyncIterator<AuthorPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  age: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BookSubscriptionPayload {
  mutation: MutationType;
  node: Book;
  updatedFields: String[];
  previousValues: BookPreviousValues;
}

export interface BookSubscriptionPayloadPromise
  extends Promise<BookSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BookPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BookPreviousValuesPromise>() => T;
}

export interface BookSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BookSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BookSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BookPreviousValuesSubscription>() => T;
}

export interface BookPreviousValues {
  id: Int;
  authorId?: Int;
  createdAt: DateTimeOutput;
  genre?: String;
  name?: String;
  updatedAt: DateTimeOutput;
}

export interface BookPreviousValuesPromise
  extends Promise<BookPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  authorId: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  genre: () => Promise<String>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BookPreviousValuesSubscription
  extends Promise<AsyncIterator<BookPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  authorId: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  genre: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Book1SubscriptionPayload {
  mutation: MutationType;
  node: Book1;
  updatedFields: String[];
  previousValues: Book1PreviousValues;
}

export interface Book1SubscriptionPayloadPromise
  extends Promise<Book1SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Book1Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Book1PreviousValuesPromise>() => T;
}

export interface Book1SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Book1SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Book1Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Book1PreviousValuesSubscription>() => T;
}

export interface Book1PreviousValues {
  id: Int;
  authorId?: Int;
  createdAt: DateTimeOutput;
  genre?: String;
  name?: String;
  updatedAt: DateTimeOutput;
}

export interface Book1PreviousValuesPromise
  extends Promise<Book1PreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  authorId: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  genre: () => Promise<String>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Book1PreviousValuesSubscription
  extends Promise<AsyncIterator<Book1PreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  authorId: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  genre: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LeadSubscriptionPayload {
  mutation: MutationType;
  node: Lead;
  updatedFields: String[];
  previousValues: LeadPreviousValues;
}

export interface LeadSubscriptionPayloadPromise
  extends Promise<LeadSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LeadPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LeadPreviousValuesPromise>() => T;
}

export interface LeadSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LeadSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LeadSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LeadPreviousValuesSubscription>() => T;
}

export interface LeadPreviousValues {
  id: UUID;
  createdAt: DateTimeOutput;
  email: String;
  updatedAt: DateTimeOutput;
}

export interface LeadPreviousValuesPromise
  extends Promise<LeadPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface LeadPreviousValuesSubscription
  extends Promise<AsyncIterator<LeadPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SequelizeMetaSubscriptionPayload {
  mutation: MutationType;
  node: SequelizeMeta;
  updatedFields: String[];
  previousValues: SequelizeMetaPreviousValues;
}

export interface SequelizeMetaSubscriptionPayloadPromise
  extends Promise<SequelizeMetaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SequelizeMetaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SequelizeMetaPreviousValuesPromise>() => T;
}

export interface SequelizeMetaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SequelizeMetaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SequelizeMetaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SequelizeMetaPreviousValuesSubscription>() => T;
}

export interface SequelizeMetaPreviousValues {
  name: ID_Output;
}

export interface SequelizeMetaPreviousValuesPromise
  extends Promise<SequelizeMetaPreviousValues>,
    Fragmentable {
  name: () => Promise<ID_Output>;
}

export interface SequelizeMetaPreviousValuesSubscription
  extends Promise<AsyncIterator<SequelizeMetaPreviousValues>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<ID_Output>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: UUID;
  createdAt: DateTimeOutput;
  email: String;
  firstname?: String;
  isAdmin?: Boolean;
  lastname?: String;
  password?: String;
  updatedAt: DateTimeOutput;
  username?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  firstname: () => Promise<String>;
  isAdmin: () => Promise<Boolean>;
  lastname: () => Promise<String>;
  password: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  firstname: () => Promise<AsyncIterator<String>>;
  isAdmin: () => Promise<AsyncIterator<Boolean>>;
  lastname: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  username: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type UUID = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Author",
    embedded: false
  },
  {
    name: "Book",
    embedded: false
  },
  {
    name: "Book1",
    embedded: false
  },
  {
    name: "Lead",
    embedded: false
  },
  {
    name: "SequelizeMeta",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
